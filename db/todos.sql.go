// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: todos.sql

package db

import (
	"context"
	"time"
)

const createTodo = `-- name: CreateTodo :one
insert into todos (description, status_id) values ($1, '1') returning id, description, status_id, created_on
`

func (q *Queries) CreateTodo(ctx context.Context, description string) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, description)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.StatusID,
		&i.CreatedOn,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
delete from todos where id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getAllTodo = `-- name: GetAllTodo :many
select
    t.id, t.description, t.status_id, t.created_on,
    s.description as status
from todos t
join status s on
t.status_id = s.id
`

type GetAllTodoRow struct {
	ID          int32
	Description string
	StatusID    int32
	CreatedOn   time.Time
	Status      string
}

func (q *Queries) GetAllTodo(ctx context.Context) ([]GetAllTodoRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTodo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTodoRow
	for rows.Next() {
		var i GetAllTodoRow
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.StatusID,
			&i.CreatedOn,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodo = `-- name: GetTodo :one
select
    t.id, t.description, t.status_id, t.created_on,
    s.description as status
from todos t
join status s on
t.status_id = s.id
where t.id = $1 limit 1
`

type GetTodoRow struct {
	ID          int32
	Description string
	StatusID    int32
	CreatedOn   time.Time
	Status      string
}

func (q *Queries) GetTodo(ctx context.Context, id int32) (GetTodoRow, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i GetTodoRow
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.StatusID,
		&i.CreatedOn,
		&i.Status,
	)
	return i, err
}

const updateTodo = `-- name: UpdateTodo :exec
update todos set description = $2, status_id = $3 where id = $1
`

type UpdateTodoParams struct {
	ID          int32
	Description string
	StatusID    int32
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.ExecContext(ctx, updateTodo, arg.ID, arg.Description, arg.StatusID)
	return err
}
